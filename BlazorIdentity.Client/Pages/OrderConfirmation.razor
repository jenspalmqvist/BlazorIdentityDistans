@page "/orderconfirmation"
@using BlazorIdentity.Client.Models
@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization

@inject AuthenticationStateProvider StateProvider
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

@* Tvingar att man är inloggad för att komma åt den här sidan *@
@attribute [Authorize]
@rendermode InteractiveWebAssembly

<h3>OrderConfirmation</h3>

@foreach (var item in ConfirmationItems)
{
	<p>@item.Name @item.Price</p>
}
@code {

	private AuthenticationState authenticationState;

	List<ClientItem> ConfirmationItems = new();
	float exchangeRate = 1;
	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			// Hämta ut vårt authenticationState
			authenticationState = await StateProvider.GetAuthenticationStateAsync();

			// Använd det för att hitta den inloggades userId via Claims
			var userId = authenticationState
				.User
				.Claims
				.Where(c => c.Type == ClaimTypes.NameIdentifier)
				.First()
				.Value;

			// Hämta ut informationen från sessionStorage
			ConfirmationItems = await sessionStorage.GetItemAsync<List<ClientItem>>(userId);
			// Meddela komponenten att statet har uppdaterats

			StateHasChanged();
		}
	}
}